---
# tasks/setup-monitoring.yaml
# Setup Prometheus monitoring integration

- name: Configure monitoring for application
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ app_name }}-metrics"
        namespace: "{{ namespace }}"
        labels:
          app.kubernetes.io/name: "{{ app_name }}"
          app.kubernetes.io/component: metrics
          prometheus.io/scrape: "true"
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/path: "{{ features.monitoring.path | default('/metrics') }}"
          prometheus.io/port: "{{ containers[0].port }}"
      spec:
        type: ClusterIP
        selector:
          app.kubernetes.io/name: "{{ app_name }}"
        ports:
          - name: metrics
            port: {{ containers[0].port }}
            targetPort: {{ containers[0].port }}
            protocol: TCP

# Create ServiceMonitor if Prometheus Operator is available
- name: Check if ServiceMonitor CRD is available
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: servicemonitors.monitoring.coreos.com
  register: servicemonitor_crd
  failed_when: false

- name: Create ServiceMonitor for Prometheus Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: "{{ app_name }}"
        namespace: "{{ namespace }}"
        labels:
          app.kubernetes.io/name: "{{ app_name }}"
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: "{{ app_name }}"
            app.kubernetes.io/component: metrics
        endpoints:
          - port: metrics
            path: "{{ features.monitoring.path | default('/metrics') }}"
            interval: 30s
  when: servicemonitor_crd.resources | length > 0