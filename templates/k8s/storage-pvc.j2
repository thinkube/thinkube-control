# Generated PersistentVolumeClaims for containers with volume mounts or GPU resources
{% for container in thinkube_spec.spec.containers %}
{% if container.volume is defined %}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ project_name }}-{{ container.name }}-storage
  namespace: {{ k8s_namespace }}
  labels:
    app.kubernetes.io/name: {{ project_name }}
    app.kubernetes.io/component: {{ container.name }}
    app.kubernetes.io/managed-by: argocd
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: microk8s-hostpath
{% elif container.gpu is defined and container.gpu.count is defined %}
# Auto-generated PVCs for GPU containers (AI/ML model storage)
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ project_name }}-{{ container.name }}-models
  namespace: {{ k8s_namespace }}
  labels:
    app.kubernetes.io/name: {{ project_name }}
    app.kubernetes.io/component: {{ container.name }}
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/purpose: model-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      # Large storage for AI models (adjust based on model size requirements)
      storage: 100Gi
  storageClassName: microk8s-hostpath
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ project_name }}-{{ container.name }}-cache
  namespace: {{ k8s_namespace }}
  labels:
    app.kubernetes.io/name: {{ project_name }}
    app.kubernetes.io/component: {{ container.name }}
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/purpose: cache-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      # Cache storage for HuggingFace and other model caches
      storage: 50Gi
  storageClassName: microk8s-hostpath
{% endif %}
{% endfor %}